[
    {
        "id": "6529a2ccc1cbe876",
        "type": "tab",
        "label": "TAKY WORLDMAP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "db7c85fcd1bf7d53",
        "type": "tcp tls in",
        "z": "6529a2ccc1cbe876",
        "name": "FETCH-FROM-TAK",
        "server": "client",
        "host": "${COT_IP}",
        "port": "${COT_PORT}",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "",
        "topic": "",
        "base64": false,
        "tls": "dc169dd1444aa8a5",
        "x": 230,
        "y": 520,
        "wires": [
            [
                "aebc8b7b.787ad8"
            ]
        ]
    },
    {
        "id": "aebc8b7b.787ad8",
        "type": "xml",
        "z": "6529a2ccc1cbe876",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 430,
        "y": 520,
        "wires": [
            [
                "369f8d28.1a2892"
            ]
        ]
    },
    {
        "id": "369f8d28.1a2892",
        "type": "function",
        "z": "6529a2ccc1cbe876",
        "name": "CoT to Map",
        "func": "/*\nThe following block of code transforms a JSONified CoT Event into a Worldmap \nPoint Payload.\n*/\n\nlet icon = null;\nlet invalid = \"9999999.0\";\nlet event = msg.payload[\"event\"];\n\n/* \nIf the CoT Event contains Detail Elements, extract the first one.\nIf there are no Detail Elements, break.\n*/\nlet _detail = event[\"detail\"];\nif (_detail === undefined) {\n  return null;\n}\nlet detail = _detail[0];\n\n/*\nIf the CoT Event contains a Point element, use it. If not, break.\n*/\nlet point = event[\"point\"];\nif (point === undefined) {\n  return null;\n}\n\n/* We'll use UID a couple of times, so lets set it as a variable here. */\nlet uid = event[\"$\"][\"uid\"];\n\n/* Extract the Event Type and Affiliation. */\nlet eventType = event[\"$\"][\"type\"];\net = eventType.split(\"-\");\nlet affil = et[1];\n\n/* There is no '.' notation in SDR, so mark Neutral. */\nif (affil.includes(\".\")) {\n  affil = \"n\";\n} \n\n/* Ram the CoT Event Type portions into a SIDR Type */\nlet SIDC = `s${affil}${et[2]}p${et[3] || \"-\" }${et[4] || \"-\" }${et[5] || \"-\" }--------`;\n\n/* \nPoints on the Worldmap can only have one uniquite identifier, which is also\nthat Points display name. If possible, use a Callsign, otherwise use UID.\n*/\nlet callsign;\nlet _contact = detail[\"contact\"];\nif (_contact === undefined) {\n  callsign = uid;\n} else {\n  callsign = _contact[0][\"$\"][\"callsign\"]; \n}\n\n/* Mouse-over Label */\nlet label = `Callsign: ${callsign} UID: ${uid}<br/>Type: ${eventType} SIDC: ${SIDC}`\n\nlet remarks = detail[\"remarks\"];\nif (remarks) {\n  remark = remarks[0][\"$\"];\n  label = `${label}<br/>${remarks}`;\n}\n\nlet track = detail[\"track\"]\n\nbearing = null;\nspeed = null;\n\nif (track) {\n  course = track[0][\"$\"][\"course\"];\n  if (course) {\n    if (course.toString() !== invalid && course.toString() !== \"0\") {\n      bearing = course;\n    }\n  }\n\n  _speed = track[0][\"$\"][\"speed\"];\n  if (_speed) {\n    if (_speed.toString() !== invalid) {\n      speed = _speed;\n    }\n  }\n}\n\n/* \nIf CoT Point CE is set and is not invalid, use that as Worldmap Point Accuracy. \n*/\naccuracy = null;\nce = event[\"point\"][0][\"$\"][\"ce\"];\nif (ce.toString() !== invalid) {\n  accuracy = ce;\n}\n\n/* Add a helpful weblink to Worldmap Points. */\nweblink = null;\nif (uid.includes(\"ICAO\")) {\n  weblink = `https://globe.adsbexchange.com/?icao=${uid.replace(\"ICAO-\", \"\")}`;\n} else if (uid.includes(\"APRS\")) {\n  weblink = `https://qrz.com/db/${uid.replace(\"APRS.\", \"\").split(\"-\")[0]}`;\n}\n\n/* Serialize as a Worldmap compatible Payload. */\nmsg.payload = {\n  name: callsign,\n  tooltip: label,\n  lat: event[\"point\"][0][\"$\"][\"lat\"],\n  lon: event[\"point\"][0][\"$\"][\"lon\"],\n  speed: speed,\n  bearing: bearing,\n  accuracy: accuracy,\n  SIDC: SIDC,\n  icon: icon,\n  ttl: 3600,\n  weblink: weblink,\n  layer: eventType\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 520,
        "wires": [
            [
                "f7b3616c.ff8d4"
            ]
        ]
    },
    {
        "id": "f7b3616c.ff8d4",
        "type": "worldmap",
        "z": "6529a2ccc1cbe876",
        "name": "TAKY WORLDMAP",
        "lat": "57.80",
        "lon": "14.70",
        "zoom": "6",
        "layer": "EsriDG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "true",
        "path": "${COT_ENDPOINT}",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriO,EsriDG,NatGeo,UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 750,
        "y": 520,
        "wires": []
    },
    {
        "id": "dc169dd1444aa8a5",
        "type": "tls-config",
        "name": "TAK SSL",
        "cert": "/data/certs/server.pem",
        "key": "/data/certs/server.key",
        "ca": "/data/certs/ca.pem",
        "certname": "crtfile.crt",
        "keyname": "keyfile.pem",
        "caname": "ca.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]
